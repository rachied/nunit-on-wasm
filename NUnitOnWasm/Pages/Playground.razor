@page "/playground"
@using Microsoft.CodeAnalysis.CSharp
@using Microsoft.CodeAnalysis
@using Microsoft.CodeAnalysis.Emit
@using System.Reflection
@using System.Text
@using NUnit.Common
@using NUnitLite
@using NUnitOnWasm.TestRunner
<h3>Playground</h3>


<textarea>
</textarea>

<button onclick="@(async () => await CompileAndRun())">Run</button>

@code {

    [Inject]
    public HttpClient HttpClient { get; set; }
    
    private List<Stream> LibStreams = new();
    
    private string _sourceCode = @"using System;

namespace PlaygroundExecution {
public class Program { 

    public int Main(string[] args)
    {
        return 42;
    }

} }";
    
    private string _testCode = @"using System;
using NUnit.Framework;

namespace PlaygroundExecution {
    [TestFixture]
    public class Program
    {
        [Test]
        public void SimpleTest()
        {
            Assert.That(1 == 1);
        }

        [TestCase(10,10)]
        [TestCase(20,200)]
        [TestCase(30,30)]
        [TestCase(40,40)]
        public void Parameterized_Test(int a, int b)
        {
            Assert.That(a == b);
        }
 } }";

    List<MetadataReference> References = new();

    public async Task CompileAndRun()
    {
        // new MyTestRunner().Run();
        var assembly = await CompileToAssembly(_testCode);
        var result = RunTestsCustom(assembly);
    }

    public async Task<Assembly> CompileToAssembly(string sourceCode)
    {
        await AddNetCoreDefaultReferences();
        
        var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary, concurrentBuild: false, optimizationLevel: OptimizationLevel.Release)
            .WithUsings("System", "System.Text", "System.Collections.Generic", "System.IO", "System.Linq", "System.Threading", "System.Threading.Tasks");
        
        var tree = SyntaxFactory.ParseSyntaxTree(sourceCode.Trim());
        var compilation = CSharpCompilation.Create("Program.cs")
            .WithOptions(compilationOptions)
            .WithReferences(References)
            .AddSyntaxTrees(tree);

        Stream codeStream;
        await using (codeStream = new MemoryStream())
        {
            // Actually compile the code
            var compilationResult = compilation.Emit(codeStream);

            // Compilation Error handling
            if (!compilationResult.Success)
            {
                OnCompilationError(compilationResult);
            }
    
            // Load
            return Assembly.Load(((MemoryStream)codeStream).ToArray());
        }
    }

    public void OnCompilationError(EmitResult compilationResult)
    {
        var sb = new StringBuilder();
        foreach (var diag in compilationResult.Diagnostics)
        {
            sb.AppendLine(diag.ToString());
        }
        var errorMessage = sb.ToString();

        if (errorMessage.Length > 0)
        {
            throw new ApplicationException(errorMessage);
        }

        return;
    }

    public dynamic RunEntryPoint(Assembly assembly, string[] args = null)
    {
        dynamic instance = assembly.CreateInstance("PlaygroundExecution.Program");
        
        var result = instance.Main(args);
        
        Console.WriteLine("Roslyn execution returned: " + result);

        return result;
    }

    public int RunTests(Assembly assembly)
    {
        var writer = new ExtendedTextWrapper(Console.Out);
        var result = new AutoRun(assembly).Execute(new string[] { "--noresult", "--stoponerror", "--labels=ON" }, writer, TextReader.Null);
        
        Console.WriteLine("NUnitLite execution returned: " + result);

        return result;
    }
    
    public int RunTestsCustom(Assembly assembly)
    {
        var args = new string[] { "--noresult", "--labels=ON" };
        var writer = new ExtendedTextWrapper(Console.Out);
        var result = new WasmRunner(assembly).Execute(writer, TextReader.Null, args);
        
        Console.WriteLine("NUnitLite execution returned: " + result);

        return result;
    }

    public async Task AddNetCoreDefaultReferences()
    {
        string[] defaultLibs =
        {
            "/_framework/System.dll",
            "/_framework/System.Buffers.dll",
            "/_framework/System.Collections.dll",
            "/_framework/System.Core.dll",
            "/_framework/System.Runtime.dll",
            "/_framework/System.IO.dll",
            "/_framework/System.Linq.dll",
            "/_framework/System.Linq.Expressions.dll",
            "/_framework/System.Linq.Parallel.dll",
            "/_framework/mscorlib.dll",
            "/_framework/netstandard.dll",
            "/_framework/System.Private.CoreLib.dll",
            "/_framework/NUnit.Framework.dll",
        };
        
        List<string> libraries = new (defaultLibs);

        foreach (var libPath in libraries)
        {
            var referenceStream = await HttpClient.GetStreamAsync(libPath);
            LibStreams.Add(referenceStream);
            References.Add(MetadataReference.CreateFromStream(referenceStream));
        }
    }
}