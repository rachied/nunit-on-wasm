@page "/playground"
@using Microsoft.CodeAnalysis.CSharp
@using Microsoft.CodeAnalysis
@using Microsoft.CodeAnalysis.Emit
@using System.Reflection
@using System.Text
<h3>Playground</h3>


<textarea>
</textarea>

<button onclick="@(async () => await CompileAndRun())">Run</button>

@code {

    [Inject]
    public HttpClient HttpClient { get; set; }
    
    private List<Stream> LibStreams = new();
    
    private string sourceCode = @"using System;

namespace PlaygroundExecution {
public class Program { 

    public int Main(string[] args)
    {
        return 42;
    }

} }";

    List<MetadataReference> References = new();

    public async Task CompileAndRun()
    {
        await AddNetCoreDefaultReferences();
        
        var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary, concurrentBuild: false)
            .WithUsings("System", "System.Text", "System.Collections.Generic", "System.IO", "System.Linq", "System.Threading", "System.Threading.Tasks");
        
        var tree = SyntaxFactory.ParseSyntaxTree(sourceCode.Trim());
        var compilation = CSharpCompilation.Create("Program.cs")
            .WithOptions(new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary,
                optimizationLevel: OptimizationLevel.Release))
            .WithReferences(References)
            .AddSyntaxTrees(tree);
        
        string errorMessage = null;
        Assembly assembly = null;

        bool isFileAssembly = false;
        Stream codeStream = null;
        using (codeStream = new MemoryStream())
        {
    // Actually compile the code
            EmitResult compilationResult = null;
            compilationResult = compilation.Emit(codeStream);

    // Compilation Error handling
            if (!compilationResult.Success)
            {
                var sb = new StringBuilder();
                foreach (var diag in compilationResult.Diagnostics)
                {
                    sb.AppendLine(diag.ToString());
                }
                errorMessage = sb.ToString();

                if (errorMessage.Length > 0)
                {
                    throw new ApplicationException(errorMessage);
                }

                return;
            }
    
    // Load
            assembly = Assembly.Load(((MemoryStream)codeStream).ToArray());
        }

    // Instantiate
        dynamic instance = assembly.CreateInstance("PlaygroundExecution.Program");

    // Call
        var result = instance.Main(null);
        
        Console.WriteLine("Roslyn execution returned: " + result);
    }

    public async Task AddNetCoreDefaultReferences()
    {
        string[] defaultLibs =
        {
            "/_framework/System.dll",
            "/_framework/System.Buffers.dll",
            "/_framework/System.Collections.dll",
            "/_framework/System.Core.dll",
            "/_framework/System.Runtime.dll",
            "/_framework/System.IO.dll",
            "/_framework/System.Linq.dll",
            "/_framework/System.Linq.Expressions.dll",
            "/_framework/System.Linq.Parallel.dll",
            "/_framework/mscorlib.dll",
            "/_framework/System.Private.CoreLib.dll"
        };
        
        List<string> libraries = new (defaultLibs);

        foreach (var libPath in libraries)
        {
            var referenceStream = await HttpClient.GetStreamAsync(libPath);
            LibStreams.Add(referenceStream);
            References.Add(MetadataReference.CreateFromStream(referenceStream));
        }
    }
}